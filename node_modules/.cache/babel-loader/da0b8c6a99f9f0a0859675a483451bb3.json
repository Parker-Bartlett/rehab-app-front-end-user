{"ast":null,"code":"import _classCallCheck from \"/home/parker-bartlett/wcci/code/rehab-application/rehab-app-front-end-user/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/parker-bartlett/wcci/code/rehab-application/rehab-app-front-end-user/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/parker-bartlett/wcci/code/rehab-application/rehab-app-front-end-user/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/parker-bartlett/wcci/code/rehab-application/rehab-app-front-end-user/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/parker-bartlett/wcci/code/rehab-application/rehab-app-front-end-user/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/parker-bartlett/wcci/code/rehab-application/rehab-app-front-end-user/src/components/Survey/Survey.js\";\nimport React, { Component } from \"react\";\nimport Question from \"../Survey/Question\";\n\nvar Survey =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Survey, _Component);\n\n  function Survey() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Survey);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Survey)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.submitSurveyButton = function () {\n      var name = _this.props.survey.name;\n      var questions = [];\n      var emptyChoice = true;\n      var questionDivs = document.querySelectorAll(\".questionDiv\");\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = questionDivs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var questionDiv = _step.value;\n          questions.push({\n            name: questionDiv.querySelector(\".questionName\").textContent,\n            value: questionDiv.querySelector(\".questionValue\").value\n          });\n\n          if (questionDiv.querySelector(\".questionValue\").value === \"\") {\n            emptyChoice = false;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      if (emptyChoice == false) {\n        alert(\"Please answer all questions\");\n      } else {\n        _this.props.submitSurvey(name, questions);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Survey, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"renderContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, !this.props.survey && React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, \"No Surveys to Complete\"), this.props.survey && React.createElement(\"div\", {\n        className: \"survey\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"patientMessage\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, \"Your Care Provider has assigned you a survey to complete. Please complete it by the due date.\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        className: \"surveyTitle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, this.props.survey.name), React.createElement(\"div\", {\n        className: \"questionBox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, this.props.survey.questions.map(function (question) {\n        return React.createElement(Question, {\n          key: question.id,\n          question: question,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        });\n      }), React.createElement(\"div\", {\n        className: \"btnContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"genericButton\",\n        onClick: function onClick() {\n          return _this2.submitSurveyButton();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \" \", \"Submit\")))));\n    }\n  }]);\n\n  return Survey;\n}(Component);\n\nexport { Survey as default };","map":{"version":3,"sources":["/home/parker-bartlett/wcci/code/rehab-application/rehab-app-front-end-user/src/components/Survey/Survey.js"],"names":["React","Component","Question","Survey","submitSurveyButton","name","props","survey","questions","emptyChoice","questionDivs","document","querySelectorAll","questionDiv","push","querySelector","textContent","value","alert","submitSurvey","map","question","id"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,oBAArB;;IAEqBC,M;;;;;;;;;;;;;;;;;;UACnBC,kB,GAAqB,YAAM;AACzB,UAAMC,IAAI,GAAG,MAAKC,KAAL,CAAWC,MAAX,CAAkBF,IAA/B;AACA,UAAIG,SAAS,GAAG,EAAhB;AAEA,UAAIC,WAAW,GAAG,IAAlB;AACA,UAAMC,YAAY,GAAGC,QAAQ,CAACC,gBAAT,CAA0B,cAA1B,CAArB;AALyB;AAAA;AAAA;;AAAA;AAMzB,6BAA0BF,YAA1B,8HAAwC;AAAA,cAA7BG,WAA6B;AACtCL,UAAAA,SAAS,CAACM,IAAV,CAAe;AACbT,YAAAA,IAAI,EAAEQ,WAAW,CAACE,aAAZ,CAA0B,eAA1B,EAA2CC,WADpC;AAEbC,YAAAA,KAAK,EAAEJ,WAAW,CAACE,aAAZ,CAA0B,gBAA1B,EAA4CE;AAFtC,WAAf;;AAIA,cAAIJ,WAAW,CAACE,aAAZ,CAA0B,gBAA1B,EAA4CE,KAA5C,KAAsD,EAA1D,EAA8D;AAC5DR,YAAAA,WAAW,GAAG,KAAd;AACD;AACF;AAdwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBzB,UAAIA,WAAW,IAAI,KAAnB,EAA0B;AACxBS,QAAAA,KAAK,CAAC,6BAAD,CAAL;AACD,OAFD,MAEO;AACL,cAAKZ,KAAL,CAAWa,YAAX,CAAwBd,IAAxB,EAA8BG,SAA9B;AACD;AACF,K;;;;;;;6BAEQ;AAAA;;AACP,aACE;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,CAAC,KAAKF,KAAL,CAAWC,MAAZ,IAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADzB,EAEG,KAAKD,KAAL,CAAWC,MAAX,IACC;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAG,QAAA,SAAS,EAAC,gBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yGADF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,EAME;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA6B,KAAKD,KAAL,CAAWC,MAAX,CAAkBF,IAA/C,CANF,EAOE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKC,KAAL,CAAWC,MAAX,CAAkBC,SAAlB,CAA4BY,GAA5B,CAAgC,UAAAC,QAAQ;AAAA,eACvC,oBAAC,QAAD;AAAU,UAAA,GAAG,EAAEA,QAAQ,CAACC,EAAxB;AAA4B,UAAA,QAAQ,EAAED,QAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADuC;AAAA,OAAxC,CADH,EAIE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,SAAS,EAAC,eADZ;AAEE,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACjB,kBAAL,EAAN;AAAA,SAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIG,GAJH,WADF,CAJF,CAPF,CAHJ,CADF;AA6BD;;;;EAtDiCH,S;;SAAfE,M","sourcesContent":["import React, { Component } from \"react\";\nimport Question from \"../Survey/Question\";\n\nexport default class Survey extends Component {\n  submitSurveyButton = () => {\n    const name = this.props.survey.name;\n    let questions = [];\n\n    let emptyChoice = true;\n    const questionDivs = document.querySelectorAll(\".questionDiv\");\n    for (const questionDiv of questionDivs) {\n      questions.push({\n        name: questionDiv.querySelector(\".questionName\").textContent,\n        value: questionDiv.querySelector(\".questionValue\").value\n      });\n      if (questionDiv.querySelector(\".questionValue\").value === \"\") {\n        emptyChoice = false;\n      }\n    }\n\n    if (emptyChoice == false) {\n      alert(\"Please answer all questions\");\n    } else {\n      this.props.submitSurvey(name, questions);\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"renderContainer\">\n        {!this.props.survey && <h2>No Surveys to Complete</h2>}\n        {this.props.survey && (\n          <div className=\"survey\">\n            <p className=\"patientMessage\">\n              Your Care Provider has assigned you a survey to complete. Please\n              complete it by the due date.\n            </p>\n            <br />\n            <h1 className=\"surveyTitle\">{this.props.survey.name}</h1>\n            <div className=\"questionBox\">\n              {this.props.survey.questions.map(question => (\n                <Question key={question.id} question={question} />\n              ))}\n              <div className=\"btnContainer\">\n                <button\n                  className=\"genericButton\"\n                  onClick={() => this.submitSurveyButton()}\n                >\n                  {\" \"}\n                  Submit\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}